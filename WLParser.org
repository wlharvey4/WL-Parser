# -*- mode:org; fill-column:79; -*-

#+title:WLParser
#+subtitle:{{{version}}} ({{{date}}})
#+author:LOLH
#+date:2019-10-06 08:28
#+macro:version Version 0.0.14

#+begin_src elisp :results silent :exports results
(org-babel-tangle-file "WLParser.org")
#+end_src

* Introduction
  :PROPERTIES:
  :unnumbered: t
  :END:
The program parses worklog daily and yearly files into an object.

* Install the WLParser Package

The following shell scripts install the projectâ€™s ~package.json~ file, install
~jest~ as a development dependency, install all ~node~ dependencies, and
finally adds a =test= script to the ~package.json~.

** Install ~package.json~
#+caption:Install the WLParser Package and Dependencies
#+name:install-wl-parser-package-and-dependencies
#+header: :results output :exports both
#+begin_src sh
yarn init -yp
yarn add --dev jest
#+end_src

** Add a =test= Script to ~package.json~
#+caption:Add /tests/ script to ~package.json~
#+name:add-tests-script-to-package.json
#+header: :results output :exports both
#+begin_src js
const fs = require('fs');
const package = JSON.parse(fs.readFileSync('package.json', 'utf8'));
package.scripts = {"tests": "jest"};
fs.writeFileSync('package.json', JSON.stringify(package, null, 2));
#+end_src

#+caption:The ~package.json~ file with added /tests/ script
#+begin_src sh :results output :exports both
cat package.json
#+end_src

* The WLRecord Module
A proper worklog record conforms to the following structure:

#+begin_example
1. datetime start: 2019-01-31T10:54:00
2. \tcase: 190301
3. \t\tSUBJECT --- VERB
4. \t\t\tTYPE: e.g. TIME | EXPENSE | ...
5. \s------------------------------------------------------------------------------
6. \sDETAIL : possible multiple lines in length
   \sDETAIL ...
7. \s------------------------------------------------------------------------------
8. datetime end: 2019-01-31T11:00:00
9. record separator: \n
#+end_example

*Note:* Record entries must be separated by a blank line.

** Implement the WLRE Configuration File
The following code sets up the individual regular expressions for each
component of a worklog entry.  The export object is the combined regular
expression for the entire worklog entry.

If an entry requires special processing at the time of parsing, as does the
=message= entry below, which needs newlines stripped, place the component name
in an array in position 0, and a lambda expression to run the entry through in
position 1.  The Wl_record will look for an object in each component entry, and
if one is found, run the entry through the lambda expression.

*Note:* The true structure of the 2nd, 3rd, and 4th lines include one, two and
three tabs, respectively, at the beginning of the lines, but for the sake of
avoiding problems with different editors handling SPACES vs TABS, I am using
only SPACES, and not TABS.

#+caption:WLRE Configuration File for a WLRecord
#+name:WLRE-configuration-for-WLRecord
#+header: :mkdirp yes
#+begin_src js -n :tangle src/wl_re.js
  /* wl_re.js */

  /* KEYS OF A WLRECORD OBJECT */
  const WL_COMPONENTS = [
    'original',
    'start_date',
    'start_time',
    'caseno',
    'subject',
    'verb',
    'type',
    ['message', m => m.replace(/\n/gm, '')],
    'end_date',
    'end_time',
    'record_sep'
  ];

  /* REGEXP COMPONENTS OF A WORKLOG RECORD */
  const DATETIME_RE = '^(\\d{4}-\\d{2}-\\d{2})T(\\d{2}:\\d{2}:00)$\\n';
  const CASE_RE     = '^\\s+(.{6})$\\n';
  const SUBJ_VERB_RE= '^\\s+(.*?) --- (.*?)$\\n';
  const TYPE_RE     = '^\\s+(.*?)$\\n';
  const MESSAGE_RE  = '^\\s-{78}$\\n^\\s(.*?)^\\s-{78}$\\n';
  const RECORD_SEP  = '(^$)';
  const FLAGS       = 'ms';

  /* COMBINED REGULAR EXPRESSION FOR ENTIRE WORKLOG ENTRY */
  const wl_re = new RegExp(
    DATETIME_RE  +
    CASE_RE      +
    SUBJ_VERB_RE +
    TYPE_RE      +
    MESSAGE_RE   +
    DATETIME_RE  +
    RECORD_SEP,
    FLAGS
  );

  module.exports = {wl_re, WL_COMPONENTS};
#+end_src

** Create the WLRecord Module
The following class receives a worklog record as a string and uses the ~wl_re~
module to parse and return its components.  Note that the parser must check
each WL_COMPONENT entry for an object (array in this case), and if one is
found, then it runs the entry through the supplied lambda expression in the
array's second position.

#+caption:The WLRecord Module
#+name:WLRecord-module
#+header: :mkdirp yes
#+begin_src js :tangle src/wl_record.js
  /* wl_record.js */

  const {wl_re, WL_COMPONENTS} = require('./wl_re.js');

  class WLRecord {

      constructor(wl_record) {
          const parsed = wl_re.exec(wl_record);

          if (!parsed) { 
              throw ReferenceError(`wl_record:\n${wl_record}\nfailed to parse`)
          }

           parsed.forEach((e,i) => {
              let key = WL_COMPONENTS[i];
              if (typeof key === 'object') {  // see WL_COMPONENTS[7]
                  e = WL_COMPONENTS[i][1](e); // run e through the supplied lambda function
                  key = WL_COMPONENTS[i][0];  // use the string key
              }

              this[key] = e;
          });
      }

      get entry() {
          return this;// Object.assign({}, this._record);
      }
  }

  module.exports = WLRecord;
#+end_src

** Test the WLRecord Module

*NOTE:* The following sample records sometimes shift to the right by a couple
of spaces upon a save of the file.  If a test record fails to parse, make sure
there is no space before either datetime and there is one space only before the
message detail and enclosing dotted lines.

#+header: :mkdirp yes
#+begin_src js -n :tangle __tests__/wl_record.test.js
      const Parser = require('../src/wl_record');

      const STR=
  `2019-01-02T10:30:00
            180704
                    STATUS UPDATE --- SW PHONE
                            TIME
   ------------------------------------------------------------------------------
   Received call from SW; Client has been removed from his housing; SW is
   picking him up and will be finding a new place for him to stay.
   ------------------------------------------------------------------------------
  2019-01-02T10:36:00

  2019-01-02T14:00:00
          180203
                  NEGOTIATION --- CLIENT PHONE
                          TIME
   ------------------------------------------------------------------------------
   Spoke with Client about terms of counter-offer.  Will propose flat amount of
   $900 per month.
   ------------------------------------------------------------------------------
  2019-01-02T14:30:00

  `;

  describe('The WLRecord', () => {
      test('throws with an invalid entry', () => {
          expect(() => {
              new Parser('abc')
          }).toThrow(ReferenceError);
      });
      test('does not throw with a valid entry', () => {
          expect(() => {
              new Parser(STR);
          }).not.toThrow();
      });
  });
#+end_src

** Check the ~wl_re~ Regular Expression Implementation
#+caption:Check WL_RE
#+name:check-wl_re
#+header: :mkdirp yes
#+begin_src js -n :tangle src/check.js
  const {wl_re, WL_COMPONENTS} = require('../src/wl_re.js');

  const STR=`2019-01-02T10:30:00
          180704
                  STATUS UPDATE --- SW PHONE
                          TIME
   ------------------------------------------------------------------------------
   Received call from SW; Client has been removed from his housing; SW is
   picking him up and will be finding a new place for him to stay.
   ------------------------------------------------------------------------------
  2019-01-02T10:36:00

  2019-01-02T14:00:00
          180203
                  NEGOTIATION --- CLIENT PHONE
                          TIME
   ------------------------------------------------------------------------------
   Spoke with Client about terms of counter-offer.  Will propose flat amount of
   $900 per month.
   ------------------------------------------------------------------------------
   2019-01-02T14:30:00

  `;

  const result = wl_re.exec(STR);

  const start_date = RegExp.$1;
  const start_time = RegExp.$2;
  const caseno     = RegExp.$3;
  const subject    = RegExp.$4;
  const verb       = RegExp.$5;
  const type       = RegExp.$6;
  const message    = RegExp.$7;
  const end_date   = RegExp.$8;
  const end_time   = RegExp.$9;
  const record_sep = result[10];

  const mess_sep_re = /\n/gm;
  const mess = message.replace(mess_sep_re, '');

  console.log(STR)
  console.log('--------------');
  console.log(`Start: ${start_date} T ${start_time}\nCase No: ${caseno}\nSubject: ${subject}\tVerb: ${verb}\nType: ${type}`);
  console.log(`${mess}`);
  console.log(`End: ${end_date} T ${end_time}`);
  console.log(`RS: ${record_sep}`);
  console.log('--------------');
#+end_src

* The WLReader Module
The Log Reader is a Stream Reader that reads records from a log file given the
name of the log file and a record separator.  The Reader emits a signal with
each record read.  The Reader emits a finished signal at the conclusion of
reading all records.

** Implementing the WLReader Module

#+caption:Implementation of the WLReader
#+name:WLReader-class
#+header: :mkdirp yes
#+begin_src js -n :tangle src/wl_reader.js
    /* wl_reader.js */

  const EventEmitter = require('events').EventEmitter;
  const fs       = require('fs');
  const path     = require('path');
  const rl       = require('readline');
  const TODAY    = new Date();
  const YEAR     = TODAY.getUTCFullYear(TODAY);
  const MIN_YEAR = 2016;
  const WORKLOG  = process.env.WORKLOG;
  if (!WORKLOG)
      throw new ReferenceError('Environment variable WORKLOG is undefined.');
  const REC_SEP  = /^$/;

  class WLReader extends EventEmitter {
      constructor(wl_year, rec_sep=REC_SEP) {
          if (typeof wl_year !== 'number' ||
              wl_year < MIN_YEAR          ||
              wl_year > YEAR)
              throw new RangeError(`Year '${wl_year}' must be between ${MIN_YEAR} and ${YEAR}`);

          if (!(rec_sep instanceof RegExp))
              throw new AssertionError(`The record separator ('${rec_sep}') should be a RegExp`);

          super();

          this._logfile = path.format({
              dir: WORKLOG,
              name: `worklog.${wl_year}`,
              ext: '.otl'
          });

          this._rec_sep = rec_sep;
          this._entry = '';

          if (!fs.existsSync(this._logfile)) {
              throw new Error(`Logfile '${this._logfile}' does not exist`);
              process.exit(1);
          }

          this._rs = fs.createReadStream(this._logfile, {
              encoding: 'utf8',
              emitClose: true,
          });
      }

      read() {
          const rl_interface = rl.createInterface({
              input: this._rs
          });

          rl_interface.on('line', line => {
              this._entry += (line + '\n');    

              if (this._rec_sep.test(line)) {
                  this.emit('entry', this._entry);
                  this._entry = '';
              }

          }).on('close', () => {
              this.emit('done');

          }).on('error', err => {
              console.error(`ERROR: ${err.message}`);

          });
      }
  }

  module.exports = WLReader;
#+end_src

** Testing the WLReader Module

#+caption:Testing the WLReader
#+name:test-log-reader
#+begin_src js -n :tangle __tests__/wl_reader.test.js
  /* log_reader.test.js */

  const path    = require('path');
  const WLR     = require('../src/wl_reader');
  const WLRecord= require('../src/wl_record');
  const WORKLOG = process.env.WORKLOG;
  const YEAR    = (new Date()).getUTCFullYear();
  const REC_SEP = /^$/;

  describe('The WLReader', () => {
      test('throws an error when the year is too early', () => {
          expect(() => {
              new WLR(2000, REC_SEP);
          }).toThrow(RangeError);
      });
      test('throws an error when the year is in the future', () => {
          expect(() => {
              new WLR(YEAR+1, REC_SEP);
          }).toThrow(RangeError);
      });
      test('reads a log file', () => {
          expect(() => {
              new WLR(2019, REC_SEP)
          }).not.toThrow();
      });
      test('reads a log file using a default record separator', () => {
          expect(() => {
              new WLR(2016)
          }).not.toThrow();
      });
      test('prints a log file', done => {
          let entry;
          const wlr = new WLR(YEAR);
          wlr.on('entry', entry => {
              entry = new WLRecord(entry);
          }).on('done', done);

          wlr.read();
      });
  });
#+end_src

#+RESULTS: test-log-reader

* The WLType Module
The WLType class receives each of the worklog records from the WLReader, parses
the record using the WLRecord, and emits messages for each type of record
found, such as TIME, EXPENSE, PAYMENT, etc, as well as for each record under
the message =entry=.  The record itself is sent with each message.

** Implementing the WLType Module

#+caption:Implementing the WLType module
#+name:WLType-module
#+begin_src js -n :tangle src/wl_type.js
  /* wl_data.js */

  const EventEmitter = require('events').EventEmitter;
  const WLReader = require('./wl_reader');
  const WLRecord = require('./wl_record');
  const REC_SEP  = /^$/;

  class WLType extends EventEmitter {
      constructor(wl_year, rec_sep=REC_SEP) {
          super();
          this._wl_reader = new WLReader(wl_year, rec_sep);
      }

      parse() {
          this._wl_reader.on('entry', wl_record => {
              const record = new WLRecord(wl_record);
              this.emit('record', record);
              this.emit(record.type, record);
          }).on('done', () => this.emit('parsed'));

          this._wl_reader.read();
      }
  }

  module.exports = WLType;
#+end_src

** Testing the WLType Module

#+caption:Testing the WLType module
#+name:WLType-module-tests
#+begin_src js -n :tangle __tests__/wl_type.test.js
  /* wl_type.test.js */

  const WLType = require('../src/wl_type');
  const {wl_re, WL_COMPONENTS} = require('../src/wl_re');
  const YEAR     = (new Date()).getUTCFullYear();
  const REC_SEP  = /^$/;

  const keys = WL_COMPONENTS.map(
      c =>
          typeof c === 'object' ?
          c[0]                  :
          c
  );

  describe('The WLType Module initialization', () => {
      it('the WLType class initializes', () => {
          expect(new WLType(YEAR, REC_SEP)).toBeInstanceOf(WLType);
      });
  });

  describe('A WLType instance', () => {
      let data;
      beforeEach(() => {
          data = new WLType(YEAR);
      });
      it('produces the event for TIME', done => {
          data.on('TIME', time_record => {
              expect(time_record).toHaveProperty('type');
              done();
          });
          data.parse();
      });
      it('has all the keys in WL_COMPONENTS', done => {
          data.on('record', record => {
              const record_keys = Object.keys(record);
              expect(record_keys).toEqual(keys);
              done();
          });
          data.parse();
      });
  });
#+end_src

#+RESULTS: WLType-module-tests

* The WLChecks Module
Finding checks and their information is a bedeviling problem with the Worklog
setup as it is.  This module is designed to find checks, parse out their
information, create an object, and emit a message with the check information.
This module uses the WLType module to find types that contain check
information, such as =EXPENSE= and =TRUST= payments.

** Implementing the WLChecks Module

#+caption:Implement the WLChecks module
#+name:WLChecks-module
#+begin_src js -n :tangle src/wl_checks.js
  /* wl_check.js */

  const EventEmitter = require('events').EventEmitter;
  const WLType       = require('./wl_type');
  const REC_SEP      = /^$/;
  const CHECK_RE     = /^(\$\d+[,]?\d*\.\d{2})\s?::\s?(.*?)\s?::\s?(.*?)\s?::\s?(\w+)\s+check\s+#\s*(\d+)/i;

  /* types that could return checks:
     - TRUST withdrawals
     - EXPENSE
  ,*/

  class WLChecks extends EventEmitter {
      constructor(wl_year, rec_sep=REC_SEP) {
          super();
          this._wl_type = new WLType(wl_year, rec_sep);
      }

      findChecks() {
          this._wl_type.on('TRUST', trust_record => {
              if (trust_record.verb === 'WITHDRAWAL') {
                  this._parseCheck(trust_record);
              }

          }).on('EXPENSE', expense_record => {
              this._parseCheck(expense_record);

          }).on('parsed', () => {
              this.emit('checked', this._checks);

          }).on('error', err => {
              console.error(`Received an error: ${err.message}`);
              throw(err);

          });

          this._wl_type.parse();
      }

      _parseCheck(record) {
          let check_info;
          let check_data = {};
          if ((check_info = CHECK_RE.exec(record.message))) {
              check_data.type = record.type;
              check_data.start_date = record.start_date;
              check_data.checkno = check_info[5];
              check_data.payee   = check_info[2];
              check_data.acct    = check_info[4];
              check_data.amount  = check_info[1];
              check_data.purpose = check_info[3];
              check_data.subject = record.subject;
              check_data.caseno  = record.caseno;
              this.emit('check', check_data);
          }
      }
  }

  module.exports = WLChecks;
#+end_src

** Test the WLChecks Module

{{{version}}} {{{date}}}

#+caption:Test the WLChecks module
#+name:WLChecks-module-test
#+begin_src js -n :tangle __tests__/wl_checks.test.js
  /* wl_checks.test.js */

  const WLChecks = require('../src/wl_checks');
  const YEAR     = new Date().getUTCFullYear();
  //const REC_SEP  = /^$/;

  let checks;

  describe('WLChecks', () => {
      it('checks is a WLChecks', () => {
          expect(new WLChecks(2016)).toBeInstanceOf(WLChecks);
      });
  });

  describe('A check', () => {
      it('has the proper components', done => {
          const checks = new WLChecks(2017);
          checks.on('check', checkCheck);
          checks.on('checked', done);
          checks.findChecks();
          function checkCheck(check) {
              console.log(check);
              expect(check).toHaveProperty('type', expect.any(String));
              expect(check).toHaveProperty('start_date', expect.any(String));
              expect(check).toHaveProperty('checkno', expect.any(String));
              expect(check).toHaveProperty('payee', expect.any(String));
              expect(check).toHaveProperty('acct', expect.any(String));
              expect(check).toHaveProperty('amount', expect.any(String));
              expect(check).toHaveProperty('purpose', expect.any(String));
              expect(check).toHaveProperty('subject', expect.any(String));
              expect(check).toHaveProperty('caseno', expect.any(String));
          }
      });
  });
#+end_src

* Makefile
:PROPERTIES:
:appendix: t
:END:
#+caption:Makefile
#+name:Makefile
#+begin_src make -n :tangle Makefile
.PHONY:	clean clean-world check

clean:
	-rm *~

clean-world:	clean
	-rm *.{info,texi,json,lock}
	-rm -rf src/ __tests__/ node_modules/

check:
	node src/check.js
#+end_src

* Concept Index
  :PROPERTIES:
  :unnumbered: 5
  :index:    cp
  :END:

* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading @@$1
#+macro:subheading @@texinfo:@subheading @@$1
#+macro:noindent @@texinfo:@noindent @@

* Local Variables                                                  :noexport:
# Local Variables:
# time-stamp-pattern:"8/^\\#\\+date:%4y-%02m-%02d %02H:%02M$"
# eval: (org-indent-mode)
# eval: (electric-quote-local-mode)
# End:
